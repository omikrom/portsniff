'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var simpleSha1 = _interopDefault(require('simple-sha1'));
require('isomorphic-fetch');

function sha1(password) {
  return new Promise(function (resolve) {
    simpleSha1(password, function (hash) {
      resolve(hash.toUpperCase());
    });
  });
}

var breakLines = function breakLines(range) {
  return range.split('\r\n');
};

var getHashs = function getHashs(range) {
  return range.map(function (hash) {
    return hash.split(':')[0];
  });
};

var hasHash = function hasHash(hash) {
  return function (range) {
    return !range.includes(hash);
  };
};

/**
 * Check if a password was pwned.
 * @param {string} password - The password to check.
 * @returns {Promise<boolean>} returns true if the password was not pwned.
 */
function notPwned(password) {
  return sha1(password).then(function (passwordHash) {
    var head = passwordHash.substr(0, 5);
    var rest = passwordHash.substring(5);

    return fetch('https://api.pwnedpasswords.com/range/' + head).then(function (response) {
      return response.text();
    }).then(breakLines).then(getHashs).then(hasHash(rest));
  });
}

module.exports = notPwned;
